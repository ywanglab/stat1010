---
# title: "Setting up Python Computing Environment"
---

# Setting-up Python Computing Environment

## Use Google Colab

All you need is a Google account. Sign in your Google account in a browser, and navigate to Google Colab. Google Colab supports both `Python` and `R`. `Python` is the default engine. Change the engine to `R` in `Connect`-\>`change runtime type`. Then you are all set. Your file will be saved to your Google Drive or you can choose to send it to your `GitHub` account (recommended).

### How to run a project file from your Google Drive?

Many times, when you run a python file in Colab, it needs to access other files, such as data files in a subdirectory. In this case, it would be convenient to have the same file structure in the Google Colab user home directory. To do this, you can use Google Drive to store your project folder, and then mount the Google Drive in Colab.

Let's assume the project folder name, `pydata-book/`.Here are the steps:

1.  `git clone` the project folder (example: `git clone https://github.com/wesm/pydata-book.git`) to your local folder. This step is only needed when you want to clone some remote repo from GitHub.
2.  **Upload** the folder (ex: `pydata-book`) to Google Drive.
3.  **Open the file using Colab**. In Google Drive, double click on the `ipynb` file, example, `ch06.ipynb` (or click on the three dots on the right end, and choose `open with`, then `Google Colaborotary`), the file will be opened by Google Colab.
4.  **Mount the Google Drive**. In Google Colab, with the specific file (example, `ch06.ipynb`) being opened, move your cursor to the first code cell, and then click on the folder icon (this should be the fourth icon) on the upper left border in the Colab browser. This will open the file explorer pane. Typically you would see a folder named `sample_data` shown. On the top of the pane, click on the Google Drive icon to mount the Google Drive. Google Colab will insert the following code below the cursor in your opened `ipynb` file:

```         
from google.colab import drive
drive.mount('/content/drive')
```

Run this code cell by pressing `SHIFT+ENTER`, and follow the prompts to complete the authentication. Wait for \~10 seconds, your Google Drive will be mounted in Colab, and it will be displayed as a folder named `drive` in the file explorer pane. You might need to click on the `Refresh` folder icon to see the folder `drive`.

5\. Open a new code cell below the above code cell, and type the code

```         
%cd /content/drive/MyDrive/pydata-book/
```

This is to change the directory to the project directory on the Google Drive. Run this code cell, and you are ready to run the file `ch06.ipynb` from the folder `pydata-book` on your personal Google Drive, just like it's on your local computer.

## On your own computer

1.  **Anaconda**: Download anaconda and install using default installation options

2.  **VSC**: Download VSC and install

3.  start VSC and install VSC extensions in VSC: Python, Jupyter, intellicode

4.  (optional) **Quarto** for authoring: Download Quarto and install

5.  Start an anaconda terminal. Navigate to the file directory.

6.  Setup a conda **virtual environment**: stat1010 and install python and ipykernel engines

    `conda create -n stat1010 python ipykernel`

7.  Activate the venv: `conda activate stat1010`

8.  start VSC by typing `code .` in the anaconda terminal.

9.  open/create a `.ipynb` or `.py` file.

10. Select the kernel `stat1010`

11. Run a code cell by pressing `Shift+Enter` or click the triangular play button.

12. Continue to run other cells.

13. After finishing using VSC, close the VSC, and deactivate the virtual environment in a conda terminal: `conda deactivate`

## Best workflow with GitHub from Colab (or a local device)
**Pre-req**: Local repo is a clone of the GitHub repo with aligned HEAD

1. Keep sync with the upstream original owner repo. On GitHub, in the forked repo (under your account), Click on "Sinc fork". 
2. Open (or create) a notebook from G-drive to work with in Colab. 

2. Then, mount the G-drive. If on a local device, use the same workflow (open or create a notebook from the project directory). 

3. In a termnal of Colab (or a terminal in VSC in a local device)
  * `git pull` or `git pull --ff` or (safer method: `git pull --ff-only`)
  
If permission denied on G-drive, run this first then repeat git pull. 
```bash
chmod +x .git/hooks/*
```

3. After editing, and before finish
```bash
git status
git add  files-to-commit
git commit -m "commit message"
git push  # this will push the files-to-commit to your fork/main
```
## Team Github workflow

## Initial setup
1. Fork and Clone

* **Fork**: You click "Fork" on GitHub → it creates a **copy** of the repo under *your GitHub account*. Navigate to `https://github.com/ywanglab/STAT4160`, then click on "Fork".
* **Clone**: You download a local copy of *your fork* to your computer. (only do this for the first time)

So after forking, you typically do (only for the first time)

```bash
git clone https://github.com/YOUR-USERNAME/REPO-NAME.git #REPO-NAME should be STAT4160
cd REPO-NAME   # the REPO-NAME should be STAT4160, cd to the current working directory  
```
2. Add the original repo as "upstream"

Your fork is linked to your GitHub account (the “origin”). To stay in sync with the original project, add a remote for the source repository:

```bash
git remote add upstream https://github.com/ywanglab/STAT4160
```

Check remotes:

```bash
git remote -v
# origin    https://github.com/YOUR-USERNAME/REPO-NAME.git (push/pull)
# upstream  https://github.com/ORIGINAL-OWNER/REPO-NAME.git (pull only)
```
3. Create a feature branch in your fork

Never work directly on `main`. Instead create a new branch:

```bash
git checkout -b feature/my-contribution  # or homework/your_initial
# edit files...

# after you done your edit, push changes to origin/main

git add files-to-commit  # git add filename (or directoryname) use `.` rarely as it will add all files in the git directory. 
git commit -m "Fix bug in utils"
git push origin feature/my-contribution  #git push by default push changes to origin/main
```
4. Open a Pull Request (PR) (only do this for the contribution you want to make, such as homework)

1. Go to your fork on GitHub (`https://github.com/YOUR-USERNAME/REPO-NAME`).
2. GitHub will show a banner: “You recently pushed to `feature/my-contribution`. Do you want to open a Pull Request?”
3. Click it → select **base repository = (upstream) original owner repo**, **compare = your branch**.

Note: `head repository` → your fork (e.g. YOUR-USERNAME/REPO-NAME) and branch (feature/...) that contains your changes.

4. Write a good description and submit the PR.

Now the maintainers of the original repo will review it. If approved, they’ll merge it.

## Keep your fork in sync
Before making new contributions, update your `fork/main` with the latest `main` from upstream:

Option A) Do it on GitHub: If  GitHub shows something like "This branch is 1 commit behind", 
"Sync Fork". 

Option B): do it via terminal: 

```bash
git checkout main   # checkout main
git pull upstream main        # pull from the upstream original repo
git push origin main          # update your fork on GitHub
```

Then branch off `main` again for your next feature.




